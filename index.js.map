{"version":3,"file":"index.js","sources":["../src/multiline-text.ts","../demo/index.ts"],"sourcesContent":["import Two from 'two.js'\nimport wrap from 'word-wrapper'\n\nconst flag = (name: string) => (\n  target: any,\n  property: string\n) => {\n  const privateProperty = `_${property}`\n  const flagproperty = `_flag${name[0].toUpperCase()}${name.slice(1)}`\n\n  Object.defineProperty(target, property, {\n    get (this: any): any {\n      return this[privateProperty]\n    },\n\n    set (this: any, value: any) {\n      this[privateProperty] = value\n      this[flagproperty] = true\n    }\n  })\n}\n\ntype OptionallyOffscreenCanvasRenderingContext2D = (\n  CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D\n)\n\ntype Text = Pick<InstanceType<typeof Two.Text>, (\n  'value' |\n  'family' |\n  'size' |\n  'leading' |\n  'alignment' |\n  'fill' |\n  'stroke' |\n  'linewidth' |\n  'style' |\n  'weight' |\n  'decoration' |\n  'baseline' |\n  'opacity' |\n  'visible' |\n  'rotation' |\n  'scale' |\n  'translation' |\n  'clone' |\n  'getBoundingClientRect'\n)>\n\nexport class MultilineText extends Two.Group implements Text {\n  private _flagWrapping: boolean = true\n  private _flagStyle: boolean = true\n\n  @flag('wrapping') public width: number\n  @flag('wrapping') public measure: 'font' | 'monospace' | 'length'\n  @flag('wrapping') public mode: 'normal' | 'pre' | 'nowrap'\n  @flag('wrapping') public value: string\n  @flag('wrapping') public family: string\n  @flag('wrapping') public size: number\n  @flag('wrapping') public weight: number\n  @flag('style') public style: string\n  @flag('style') public leading: number\n  @flag('style') public absoluteLeading: boolean\n  @flag('style') public alignment: string\n  @flag('style') public fill: string\n  @flag('style') public stroke: string\n  @flag('style') public linewidth: number\n  @flag('style') public decoration: string\n  @flag('style') public baseline: string\n  @flag('style') public opacity: number\n  @flag('style') public visible: boolean\n\n  public constructor (message: string, x: number = 0, y: number = 0, {\n    width = Infinity,\n    measure = 'font',\n    mode = 'normal',\n    family = 'sans-serif',\n    size = 13,\n    weight = 500,\n    style = 'normal',\n    leading = 1.2,\n    absoluteLeading = false,\n    alignment = 'middle',\n    fill = '#000',\n    stroke = 'transparent',\n    linewidth = 1,\n    decoration = 'none',\n    baseline = 'middle',\n    opacity = 1,\n    visible = true\n  }: {\n    width?: number\n    measure?: 'font' | 'monospace' | 'length'\n    mode?: 'normal' | 'pre' | 'nowrap'\n    family?: string\n    size?: number\n    weight?: number\n    style?: string\n    leading?: number\n    absoluteLeading?: boolean\n    alignment?: string\n    fill?: string\n    stroke?: string\n    linewidth?: number\n    decoration?: string\n    baseline?: string\n    opacity?: number\n    visible?: boolean\n  } = {}) {\n    super()\n\n    this.translation.set(x, y)\n    this.width = width\n    this.measure = measure\n    this.mode = mode\n    this.value = message\n    this.family = family\n    this.size = size\n    this.leading = leading\n    this.absoluteLeading = absoluteLeading\n    this.alignment = alignment\n    this.fill = fill\n    this.stroke = stroke\n    this.linewidth = linewidth\n    this.weight = weight\n    this.style = style\n    this.decoration = decoration\n    this.baseline = baseline\n    this.opacity = opacity\n    this.visible = visible\n  }\n\n  public get computedLeading(): number {\n    return this.absoluteLeading ? this.leading : this.size * this.leading\n  }\n\n  private get context(): OptionallyOffscreenCanvasRenderingContext2D {\n    const value = (typeof OffscreenCanvas === 'function'\n      ? new OffscreenCanvas(1, 1)\n      : document.createElement('canvas')\n    ).getContext('2d')!\n\n    Object.defineProperty(MultilineText.prototype, 'context', {\n      value,\n      writable: false,\n      configurable: false\n    })\n\n    return value\n  }\n\n  private get _measureMonospace(): (\n    text: string,\n    start: number,\n    end: number,\n    width: number\n  ) => { start: number, end: number } {\n    const charWidth = this.context.measureText('M').width\n    return (text: string, start: number, end: number, width: number) => ({\n      start,\n      end: start + Math.min(\n        end - start,\n        ~~(width / charWidth),\n        ~~((end - start) * charWidth)\n      )\n    })\n  }\n\n  private _measureLength = (\n    text: string,\n    start: number,\n    end: number,\n    width: number\n  ): { start: number, end: number } => ({\n    start,\n    end: start + Math.min(width, end - start)\n  })\n\n  private _measureFont = (\n    text: string,\n    start: number,\n    end: number,\n    width: number\n  ): { start: number, end: number } => {\n    while (this.context.measureText(text.slice(start, end)).width > width) {\n      end--\n    }\n\n    return { start, end }\n  }\n\n  private _prepareMeasureContext(): void {\n    this.context.font = `${\n      this.style\n    } ${\n      this.weight\n    } ${\n      this.size\n    }px ${\n      this.family\n    }`\n  }\n}\n\nObject.assign(MultilineText.prototype as any, {\n  _update(bubbles: boolean): any {\n    if (this._flagWrapping) {\n      let measure: (\n        text: string,\n        start: number,\n        end: number,\n        width: number\n      ) => { start: number, end: number }\n\n      if (this.measure === 'length') {\n        measure = this._measureLength\n      } else {\n        this._prepareMeasureContext()\n        measure = this.measure === 'monospace'\n          ? this._measureMonospace\n          : this._measureFont\n      }\n\n      const texts = this.children as Text[]\n      const lines = wrap\n        .lines(this.value, {\n          measure,\n          width: this.width,\n          mode: this.mode\n        })\n        .map(({ start, end }) => this.value.slice(start, end))\n\n      while (texts.length > lines.length) {\n        this.remove(texts[0])\n      }\n\n      texts.forEach((text, index) => {\n        text.value = lines[index].trim()\n      })\n\n      while (texts.length < lines.length) {\n        this.add(new Two.Text(lines[texts.length].trim(), 0, 0))\n      }\n\n      this._flagStyle = true\n    }\n\n    if (this._flagStyle) {\n      const {\n        family,\n        size,\n        computedLeading: leading,\n        alignment,\n        fill,\n        stroke,\n        linewidth,\n        style,\n        weight,\n        decoration,\n        baseline,\n        opacity,\n        visible\n      } = this\n\n      let offset: number = 0\n\n      switch (alignment) {\n        case 'end':\n          offset = this.width\n          break\n\n        case 'center':\n          offset = this.width / 2\n          break\n      }\n\n      ;(this.children as Text[]).forEach((text, index) => {\n        text.family = family\n        text.size = size\n        text.leading = leading\n        text.alignment = alignment\n        text.fill = fill\n        text.stroke = stroke\n        text.linewidth = linewidth\n        text.style = style\n        text.weight = weight\n        text.decoration = decoration\n        text.baseline = baseline\n        text.opacity = opacity\n        text.visible = visible\n        text.translation.set(offset, leading * index)\n      })\n    }\n\n    (Two.Group.prototype as unknown as { _update (bubbles?: boolean): void })\n      ._update.call(this, bubbles)\n\n    return this\n  },\n\n  flagReset(): any {\n    this._flagWrapping = this._flagStyle = false\n\n    ;(Two.Group.prototype as unknown as { flagReset(): void })\n      .flagReset.call(this)\n\n    return this\n  }\n} as any)\n","import Two from 'two.js'\nimport dat from 'dat.gui'\nimport { MultilineText } from '../src'\n\nconst two = new Two({\n  type: Two.Types.canvas,\n  autostart: true,\n  fullscreen: true\n}).appendTo(document.body)\n\nconst container = new Two.Group()\ncontainer.translation.set(20, 20)\n\nconst multilineText = new MultilineText('', 0, 0, {\n  size: 36,\n  weight: 900,\n  alignment: 'start',\n  baseline: 'middle',\n  width: 500,\n  stroke: 'rgba(0, 0, 0, 0)'\n})\n\nconst rect = new Two.Path([\n  new Two.Anchor(0, 0, 0, 0, 0, 0, Two.Commands.line),\n  new Two.Anchor(0, 0, 0, 0, 0, 0, Two.Commands.line),\n  new Two.Anchor(0, 0, 0, 0, 0, 0, Two.Commands.line),\n  new Two.Anchor(0, 0, 0, 0, 0, 0, Two.Commands.line)\n], true, false, false)\n\nrect.stroke = 'rgba(255, 0, 0, .2)'\nrect.linewidth = 1\n\ntwo.bind('update', () => {\n  const leading = multilineText.computedLeading\n  const width = multilineText.width\n  const height = multilineText.children.length * leading\n\n  rect.vertices[1].x = rect.vertices[2].x = width\n  rect.vertices[2].y = rect.vertices[3].y = height\n\n  multilineText.translation.y = leading / 2\n})\n\ncontainer.add(rect, multilineText)\ntwo.add(container)\n\nconst gui = new dat.GUI()\n\ngui.add(multilineText, 'width', 0, 800, 1)\ngui.add(multilineText, 'mode', ['normal', 'pre', 'nowrap'])\ngui.add(multilineText, 'measure', ['font', 'monospace', 'length']).onChange(() => { (rect as any).visible = multilineText.measure !== 'length' })\ngui.add(multilineText, 'family')\ngui.add(multilineText, 'size', 1, 50, 0.1)\nconst leadingGUI = gui.add(multilineText, 'leading', 0, 5, 0.01)\nconst absoluteLeadingGUI = gui.add(multilineText, 'absoluteLeading')\ngui.add(multilineText, 'alignment', ['start', 'end', 'center'])\ngui.addColor(multilineText, 'fill')\ngui.addColor(multilineText, 'stroke')\ngui.add(multilineText, 'linewidth', 0, 10)\ngui.add(multilineText, 'style', ['normal', 'italic'])\ngui.add(multilineText, 'weight', 100, 900, 100)\ngui.add(multilineText, 'decoration', ['none', 'underline', 'strikethrough'])\ngui.add(multilineText, 'baseline', ['middle', 'baseline', 'top'])\ngui.add(multilineText, 'opacity', 0, 1, 0.001)\ngui.add(multilineText, 'visible')\n\nabsoluteLeadingGUI.onChange(() => {\n  if (multilineText.absoluteLeading) {\n    leadingGUI.max(250)\n    leadingGUI.setValue(Math.min(250, multilineText.leading * multilineText.size))\n  } else {\n    leadingGUI.max(5)\n    leadingGUI.setValue(Math.min(5, multilineText.leading / multilineText.size))\n  }\n})\n\nconst text = `\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\n  Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint.\n`.trim()\n\nlet interval = setInterval(() => {\n  multilineText.value = text.slice(0, multilineText.value.length + 1)\n  if (multilineText.value.length === text.length) {\n    clearInterval(interval)\n  }\n}, 40)\n"],"names":["flag","name","target","property","privateProperty","flagproperty","toUpperCase","slice","Object","defineProperty","get","this","set","value","MultilineText","Two","Group","constructor","message","x","y","width","Infinity","measure","mode","family","size","weight","style","leading","absoluteLeading","alignment","fill","stroke","linewidth","decoration","baseline","opacity","visible","super","_flagWrapping","_flagStyle","_measureLength","text","start","end","Math","min","_measureFont","context","measureText","translation","computedLeading","OffscreenCanvas","document","createElement","getContext","prototype","writable","configurable","_measureMonospace","charWidth","_prepareMeasureContext","font","__decorate","assign","_update","bubbles","texts","children","lines","wrap","map","length","remove","forEach","index","trim","add","Text","offset","call","flagReset","two","type","Types","canvas","autostart","fullscreen","appendTo","body","container","multilineText","rect","Path","Anchor","Commands","line","bind","height","vertices","gui","dat","GUI","onChange","leadingGUI","absoluteLeadingGUI","addColor","max","setValue","interval","setInterval","clearInterval"],"mappings":"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"}